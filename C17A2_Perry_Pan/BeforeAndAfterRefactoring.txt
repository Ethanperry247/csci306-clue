Authors: Ethan Perry and Caleb Pan
Most significant refactoring choice--located in the board class.

---------------------------------------------------------------------------------------------------

Before:

public Set<BoardCell> getAdjList(int i, int j) {
		BoardCell current = getCellAt(i,j);
		Set<BoardCell> adjacent = new HashSet<BoardCell>(); 
	
		if (current.isRoom()) {	// if in room, cannot move
			return adjacent;
			
		} else if (current.isDoorway()) {	// if on a door cell, finds adjacent cell to enter
			
			switch(current.getDoorDirection()) {
				case LEFT: 
					adjacent.add(getCellAt(i,j-1));
					break;
				case RIGHT:
					adjacent.add(getCellAt(i,j+1));
					break;
				case UP:
					adjacent.add(getCellAt(i-1,j));
					break;
				case DOWN:
					adjacent.add(getCellAt(i+1,j));
					break;
				default:
					break;
			} 
			
		} else if (current.isWalkway()) {	// if on a walkway, check all adjacent cells if can move onto (other walkways or doors) 
			
			if (j > 0 && getCellAt(i,j-1).getInitial() == 'W' 
					|| j > 0 && getCellAt(i,j-1).getDoorDirection() == DoorDirection.RIGHT) {
				adjacent.add(getCellAt(i,j-1));
			}
			
			if (j < numColumns-1 && getCellAt(i,j+1).getInitial() == 'W'
					|| j < numColumns-1 && getCellAt(i,j+1).getDoorDirection() == DoorDirection.LEFT) {
				adjacent.add(getCellAt(i,j+1));
			}
			
			if (i > 0 && getCellAt(i-1,j).getInitial() == 'W'
					|| i > 0 && getCellAt(i-1,j).getDoorDirection() == DoorDirection.DOWN) {
				adjacent.add(getCellAt(i-1,j));
			}
			
			if (i < numRows-1 && getCellAt(i+1,j).getInitial() == 'W'
					|| i < numRows-1 && getCellAt(i+1,j).getDoorDirection() == DoorDirection.UP) {
				adjacent.add(getCellAt(i+1,j));
			}
			
		}
		
		return adjacent;
	}	


-------------------------------------------------------------------------------------------------------

After:

public Set<BoardCell> getAdjList(int row, int column) {
		BoardCell current = getCellAt(row,column);
		Set<BoardCell> adjacent = new HashSet<BoardCell>(); 

		if (current.isRoom()) {	// if in room, cannot move
			return adjacent;

		} else if (current.isDoorway()) {	// if on a door cell, finds adjacent cell to enter

			switch(current.getDoorDirection()) {
			case LEFT:	// check if can enter to the left cell
				adjacent.add(getCellAt(row, column-1));
				break;
			case RIGHT:	// check if can enter to the right cell
				adjacent.add(getCellAt(row, column+1));
				break;
			case UP:	// check if can enter to the cell above
				adjacent.add(getCellAt(row-1, column));
				break;
			case DOWN:	// check if can enter to the cell below
				adjacent.add(getCellAt(row+1, column));
				break;
			default:
				break;
			} 

		} else if (current.isWalkway()) {	// if on a walkway, check all adjacent cells if can move onto (other walkways or doors) 

			// check if can move to the cell to the right
			if (column > 0 && (isAdjWalkway(row, column-1)
					|| getCellAt(row, column-1).getDoorDirection() == DoorDirection.RIGHT)) {
				adjacent.add(getCellAt(row, column-1));
			}
			
			// check if can move to the cell to the left
			if (column < numColumns-1 && (isAdjWalkway(row, column+1)
					|| getCellAt(row, column+1).getDoorDirection() == DoorDirection.LEFT)) {
				adjacent.add(getCellAt(row, column+1));
			}
			
			// check if can move to the cell below
			if (row > 0 && (isAdjWalkway(row-1, column)
					|| getCellAt(row-1, column).getDoorDirection() == DoorDirection.DOWN)) {
				adjacent.add(getCellAt(row-1, column));
			}
			
			// check if can move to the cell above
			if (row < numRows-1 && (isAdjWalkway(row+1, column)
					|| getCellAt(row+1, column).getDoorDirection() == DoorDirection.UP)) {
				adjacent.add(getCellAt(row+1, column));
			}

		}

		return adjacent; // return all adjacent cells that can be moved onto from current board cell
	}	
	
	// helper method to determine if an adjacent cell is a walkway
	public boolean isAdjWalkway(int row, int column) {
		if (getCellAt(row, column).getInitial() == 'W') {	// if evaluated cell is a Walkway, return true
			return true;
		} else {	// if not, return false
			return false;
		}
	}